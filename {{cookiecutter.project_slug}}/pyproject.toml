[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{cookiecutter.project_slug}}"
# The current version of this project is computed during the installation stage and then set in this
# variable. Thus, the default value `0.0.0` is only here to create the `version` placeholder and
# doesn't reflect the current version of this project.
version = "0.0.0"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.author}}"]
readme = "README.md"
packages = [
    {include="{{cookiecutter.project_slug}}", from="src"}
]

[tool.poetry.dependencies]
python = "~{{cookiecutter.python_version}}"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.255"
black = "^23.1.0"
pylint = "^2.17.0"
mypy = "^1.1.1"
pre-commit = "^3.1.1"
autoflake = "^2.0.2"
pytest = "^7.2.2"
pytest-cov = "^4.0.0"

[tool.poetry-dynamic-versioning]
enable = true

[tool.black]
line-length = 100

[tool.pylint.basic]
good-names = [
    "i", "j", "k", "ex", "Run", "_", # Default names that come from the pylint configuration.
    "x", "y", "z"
]

[tool.pylint.format]
# Compatibility with black (source: https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#pylint)
max-line-length = 100

[tool.pylint.master]
ignore = [".git", ".venv", "scripts"]
ignore-patterns = "test_.*?py"

[tool.mypy]
files = ["src/{{cookiecutter.project_slug}}"]

[tool.ruff]
line-length = 100
target-version = "py{{cookiecutter.python_version|replace('.', '')}}"
fix = true
select = ["E", "F", "I"]

[tool.pytest.ini_options]
addopts = "--doctest-modules --basetemp .pytest"
markers = [
    "long: marks tests as long (deselect with '-m \"not long\"')",
    "std: Software Test Description ID of the test"

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:"
]
fail_under = 10

[tool.coverage.run]
source = ["src/{{cookiecutter.project_slug}}"]
